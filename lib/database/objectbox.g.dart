// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../entities/anotation_entity.dart';
import '../entities/subject_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 8068563579642085581),
      name: 'AnotationEntity',
      lastPropertyId: const IdUid(4, 8223025405263496351),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2397109208251437942),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1819245330871585954),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9007625859033890139),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8223025405263496351),
            name: 'images',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 399700231528899954),
      name: 'SubjectEntity',
      lastPropertyId: const IdUid(3, 2152761758868518802),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5973450990416420856),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1261053029994463825),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2152761758868518802),
            name: 'professor',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 399700231528899954),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [7655759539583557121],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        6122550022959202681,
        6552143575570388777,
        5926166880424149487
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AnotationEntity: EntityDefinition<AnotationEntity>(
        model: _entities[0],
        toOneRelations: (AnotationEntity object) => [],
        toManyRelations: (AnotationEntity object) => {},
        getId: (AnotationEntity object) => object.id,
        setId: (AnotationEntity object, int id) {
          object.id = id;
        },
        objectToFB: (AnotationEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final imagesOffset = object.images == null
              ? null
              : fbb.writeList(
                  object.images!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, imagesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AnotationEntity(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              images: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    SubjectEntity: EntityDefinition<SubjectEntity>(
        model: _entities[1],
        toOneRelations: (SubjectEntity object) => [],
        toManyRelations: (SubjectEntity object) => {},
        getId: (SubjectEntity object) => object.id,
        setId: (SubjectEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SubjectEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final professorOffset = fbb.writeString(object.professor);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, professorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SubjectEntity(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              professor: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AnotationEntity] entity fields to define ObjectBox queries.
class AnotationEntity_ {
  /// see [AnotationEntity.id]
  static final id =
      QueryIntegerProperty<AnotationEntity>(_entities[0].properties[0]);

  /// see [AnotationEntity.name]
  static final name =
      QueryStringProperty<AnotationEntity>(_entities[0].properties[1]);

  /// see [AnotationEntity.description]
  static final description =
      QueryStringProperty<AnotationEntity>(_entities[0].properties[2]);

  /// see [AnotationEntity.images]
  static final images =
      QueryStringVectorProperty<AnotationEntity>(_entities[0].properties[3]);
}

/// [SubjectEntity] entity fields to define ObjectBox queries.
class SubjectEntity_ {
  /// see [SubjectEntity.id]
  static final id =
      QueryIntegerProperty<SubjectEntity>(_entities[1].properties[0]);

  /// see [SubjectEntity.name]
  static final name =
      QueryStringProperty<SubjectEntity>(_entities[1].properties[1]);

  /// see [SubjectEntity.professor]
  static final professor =
      QueryStringProperty<SubjectEntity>(_entities[1].properties[2]);
}
